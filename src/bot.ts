import { Telegraf, Composer, Context } from 'telegraf';
import { TelegrafSessionRedis } from '@ivaniuk/telegraf-session-redis';
import { ExtraReplyMessage } from 'telegraf/typings/telegram-types';

import { app, prkomApi } from './app.class';
import * as xEnv from './environment';
import { ITextMessageContext } from './telegraf.interface';
import { MagaResponseInfo } from './types';
import { redisClient } from './redis.service';
import * as utils from './utils';

// if (!xEnv.TELEGRAM_BOT_TOKEN) {
//   throw new Error('TELEGRAM_BOT_TOKEN is not defined');
// }

export const redisSession = new TelegrafSessionRedis({
  client: redisClient,
  getSessionKey: (ctx: Context) =>
    ctx.from && ctx.chat && `session:${ctx.from.id}:${ctx.chat.id}`,
});
const rateLimiter = new utils.RateLimiter(1, 1e3);

let bot = new Telegraf(xEnv.TELEGRAM_BOT_TOKEN);
bot.catch((e) => {
  console.error(e);
});
bot.launch().then(() => {
  console.log('Bot launched');
});

bot.telegram.setMyCommands([
  { command: 'start', description: 'Show menu' },
  { command: 'info', description: 'Show my info' },
  { command: 'watch', description: 'Set watcher' },
  { command: 'stop', description: 'Stop watcher' },
]);

bot.use(redisSession.middleware());
bot.use((ctx: any, next) => {
  if (!ctx.session.chatId) {
    notifyAdmin(
      `<b>[DEBUG]</b> New user: <code>${ctx.from.id}</code> <code>@${ctx.from.username}</code>`,
    );
  }

  const toSession = {
    chatId: ctx.from.id,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
    username: ctx.from.username,
  };

  for (const key in toSession) {
    if (toSession[key] !== undefined) {
      ctx.session[key] = toSession[key];
    }
  }

  return next();
});

bot.on('message', async (ctx, next) => {
  const limited = await rateLimiter.take(ctx.from.id);

  if (limited) {
    await ctx.reply('–ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥... ü•µ');
    return;
  }
  return await next();
});

bot.start((ctx) => {
  const { npm_package_homepage } = process.env;
  ctx.replyWithHTML(
    `–ü—Ä–∏–≤–µ—Ç! üëã\n` +
      `–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Å–ø–∏—Å–∫–∞—Ö –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –≤ –Ø–ì–¢–£.\n\n` +
      `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π <code>/watch 123-456-789 10</code>, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å <i>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥</i> –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.\n` +
      `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n` +
      `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±–æ—Ç–∞ –≤ <a href="https://vk.com/ystuty">–≥—Ä—É–ø–ø–µ VK YSTUty</a>\n\n` +
      `<code>v${process.env.npm_package_version}</code>` +
      (!npm_package_homepage
        ? ''
        : `\n<a href="${npm_package_homepage}">–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</a>`),
    { disable_web_page_preview: true },
  );
});

bot.command('app', (ctx) => {
  if (!xEnv.TELEGRAM_ADMIN_IDS.includes(ctx.from.id)) {
    return;
  }

  console.log('app', app);
  ctx.reply('see console');
});

bot.command('dump', async (ctx) => {
  if (!xEnv.TELEGRAM_ADMIN_IDS.includes(ctx.from.id)) {
    return;
  }

  const [, type] = ctx.message.text.split(' ').filter(Boolean);

  switch (type?.toLowerCase()) {
    case 'full': {
      const targets = await app.getTargets();
      ctx.replyWithDocument({
        source: Buffer.from(
          JSON.stringify(
            { lastData: app.lastData, targets },
            utils.MAP_replacer,
            2,
          ),
        ),
        filename: 'dump-full.json',
      });
      return;
    }
    case 'targets': {
      const targets = await app.getTargets();
      console.log('targets', targets);

      ctx.replyWithDocument({
        source: Buffer.from(JSON.stringify({ targets }, utils.MAP_replacer, 2)),
        filename: 'dump-targets.json',
      });
      return;
    }
    case 'lastdata': {
      ctx.replyWithDocument({
        source: Buffer.from(
          JSON.stringify({ lastData: app.lastData }, utils.MAP_replacer, 2),
        ),
        filename: 'dump-lastdata.json',
      });
      return;
    }
    default: {
      ctx.replyWithHTML(
        'Unknown type.\n' +
          'Use <code>/dump full</code>\n' +
          'Use <code>/dump targets</code>\n' +
          'Use <code>/dump lastdata</code>',
      );
      return;
    }
  }
});

bot.command(
  'info',
  Composer.fork(async (ctx: ITextMessageContext) => {
    const [, ...rest] = ctx.message.text.split(' ').filter(Boolean);
    let uid = rest.join(' ') || ctx.session.uid;

    if (!uid || uid.length > 16) {
      ctx.replyWithHTML(
        `–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n` +
          `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π <i>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥</i> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n` +
          `–ù–∞–ø—Ä–∏–º–µ—Ä, <code>/info 123-456-789 10</code>.\n` +
          `–£–∫–∞–∑–∞–Ω—ã–π –∫–æ–¥ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π <code>/watch 123-456-789 10</code>, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å <i>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥</i> –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.`,
      );
      return;
    }

    const res = await prkomApi.get<MagaResponseInfo[]>(
      `/admission/get/${uid}?original=true`,
    );

    if (res.data.length === 0) {
      ctx.replyWithHTML(
        `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n` +
          `–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –£–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.`,
      );
      return;
    }

    for (const app of res.data) {
      const { info, originalInfo, item, payload } = app;
      const totalSeats = info.numbersInfo.total || null;
      const message = [
        `‚Ä¢ <b>–£–ö: ${item.uid}</b>`,
        `‚Ä¢ ${utils.taggerSmart(originalInfo.buildDate)}`,
        `‚Ä¢ ${utils.taggerSep(originalInfo.competitionGroupName)}`,
        `‚Ä¢ ${utils.taggerSmart(originalInfo.formTraining)}`,
        `‚Ä¢ ${utils.taggerSmart(originalInfo.levelTraining)}`,
        `‚Ä¢ ${utils.taggerSmart(originalInfo.basisAdmission)}`,
        `‚Ä¢ ${utils.taggerSmart(originalInfo.numbersInfo)}`,
        ``,
        `‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: <code>${
          item.position
        }/${totalSeats}</code> ${utils.greenger(
          item.isGreen,
          totalSeats && totalSeats - payload.beforeGreens < 1,
        )}`,
        `‚Ä¢ –°—É–º–º–∞ –±–∞–ª–ª–æ–≤: <code>${item.totalScore || '–Ω–µ—Ç—É'}</code>`,
        `‚Ä¢ –ë–∞–ª–ª—ã –∑–∞ —ç–∫–∑–∞–º–µ–Ω: <code>${item.scoreExam || '–Ω–µ—Ç—É'}</code>`,
        `‚Ä¢ –ë–∞–ª–ª—ã –∑–∞ —Å–æ–±–µ—Å: <code>${item.scoreInterview || '–Ω–µ—Ç—É'}</code>`,
        `‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª: <code>${item.original ? '‚úÖ' : '‚úñÔ∏è'}</code>`,
        ``,
        `‚Ä¢ –î–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç: <code>${payload.beforeGreens}</code> —á–µ–ª.`,
        `‚Ä¢ –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç: <code>${payload.afterGreens}</code> —á–µ–ª.`,
      ];
      await ctx.replyWithHTML(
        message.join('\n'),
        utils.tgKeyboard_ViewFile(app.filename),
      );
    }
  }),
);

bot.command('watch', (ctx: ITextMessageContext) => {
  const [, ...rest] = ctx.message.text.split(' ').filter(Boolean);
  const uid = rest.join(' ');

  if (uid.length === 0 || uid.length > 16) {
    ctx.replyWithHTML(
      `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π <i>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥</i> –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.\n` +
        `–ù–∞–ø—Ä–∏–º–µ—Ä, <code>/watch 123-456-789 10</code>.\n` +
        `–£–∫–∞–∑–∞–Ω—ã–π –∫–æ–¥ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ.`,
    );
    return;
  }

  if (ctx.session.uid !== uid || !ctx.session.loadCount) {
    ctx.session.loadCount = 0;
  }
  ctx.session.uid = uid;
  delete ctx.session.powerOff;

  ctx.replyWithHTML(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ: <code>${uid}</code>`);
});

bot.command('stop', (ctx: ITextMessageContext) => {
  if (!ctx.session.uid) {
    ctx.replyWithHTML(`–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
    return;
  }

  ctx.session.powerOff = true;
  ctx.replyWithHTML(`–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
});

export const notifyAdmin = async (
  message: string,
  extra: ExtraReplyMessage = {},
) => {
  // TODO: FIX BIG SPAM
  for (const uid of xEnv.TELEGRAM_ADMIN_IDS) {
    try {
      await bot.telegram.sendMessage(uid, message, {
        parse_mode: 'HTML',
        disable_notification: true,
        ...extra,
      });
    } catch {}
  }
};

export { bot };
